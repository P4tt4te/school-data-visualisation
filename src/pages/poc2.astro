---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Graph 2 poc">
  <main container-graph>
  </main>
</Layout>
<script>
  import * as d3 from "d3";
  import { uid } from "../utils/uid";
  
  async function chart() {
    const data = await d3.dsv(";","/data/etablissement.csv", (d) => {
    return {
        etablissement: d.etablissement,
        effectif: parseInt(d.effectif_de_terminale)
    }
  });
  console.log("data : ",data)

  // Declare the chart dimensions and margins.
  const width = 1200;
  const height = 400;
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  // Declare the x (horizontal position) scale.

  const x = d3.scaleUtc()
      .domain(d3.extent(data, d => d.etablissement))
      .range([marginLeft, width - marginRight]);

  const y = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.effectif)]).nice()
      .range([height - marginBottom, marginTop]);

  // Create the horizontal axis generator, called at startup and when zooming.
  const xAxis = (g, x) => g
      .call(d3.axisBottom(x).ticks(width / 5).tickSizeOuter(0))

  // The area generator, called at startup and when zooming.
  const area = (data, x) => {
    const t = d3.area()
      .curve(d3.curveStepAfter)
      .x(d => x(d.etablissement))
      .y0(y(0))
      .y1(d => y(d.effectif))
    (data);

    console.log(t);
    return t;
  } 

  // Create the zoom behavior.
  const zoom = d3.zoom()
      .scaleExtent([1, 32])
      .extent([[marginLeft, 0], [width - marginRight, height]])
      .translateExtent([[marginLeft, -Infinity], [width - marginRight, Infinity]])
      .on("zoom", zoomed);

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("viewBox", [0, 0, width, height])
      .attr("width", width)
      .attr("height", height)
      .attr("style", "max-width: 100%; height: auto;");

  // Create a clip-path with a unique ID.
  const clip = uid("clip");

  svg.append("clipPath")
      .attr("id", clip.id)
    .append("rect")
      .attr("x", marginLeft)
      .attr("y", marginTop)
      .attr("width", width - marginLeft - marginRight)
      .attr("height", height - marginTop - marginBottom);

  // Create the area.
  const path = svg.append("path")
      .attr("clip-path", clip)
      .attr("fill", "white")
      .attr("d", area([...data], x));

      

  // Append the horizontal axis.
  const gx = svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(xAxis, x);

  // Append the vertical axis.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y).ticks(null, "s"))
      .call(g => g.select(".domain").remove())
      .call(g => g.select(".tick:last-of-type text").clone()
          .attr("x", 3)
          .attr("text-anchor", "start")
          .attr("font-weight", "bold")
          .text("Effectifs"));

  // When zooming, redraw the area and the x axis.
  function zoomed(event) {
    const xz = event.transform.rescaleX(x);
    path.attr("d", area(data, xz));
    gx.call(xAxis, xz);
  }

  // Initial zoom.
  svg.call(zoom)
    .transition()
      .duration(750)
      .call(zoom.scaleTo, 4, [0, 0]);

      return svg.node();
  }

  
  // Append the SVG element.
  console.log(document.querySelector("[container-graph]"));
  const node = await chart();
  document.querySelector("[container-graph]").append(node);
  </script>
