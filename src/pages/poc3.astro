---
import Layout from '../layouts/Layout.astro';
---
<Layout title="Graph 2 poc">
  <main container-graph>
  </main>
</Layout>
<script>
  import * as d3 from "d3";
  import { uid } from "../utils/uid";
  
  async function chart() {
    const data = await d3.dsv(";","/data/etablissement.csv", (d) => {
    return {
        etablissement: d.etablissement,
        effectif: parseInt(d.effectif_de_terminale)
    }
  });
  console.log("data : ",data)

   // Specify the chart’s dimensions, based on a bar’s height.
   const barHeight = 25;
  const marginTop = 30;
  const marginRight = 0;
  const marginBottom = 10;
  const marginLeft = 30;
  const width = 928;
  const height = Math.ceil((data.length + 0.1) * barHeight) + marginTop + marginBottom;

  // Create the scales.
  const x = d3.scaleLinear()
      .domain([0, d3.max(data, d => d.effectif)])
      .range([marginLeft, width - marginRight]);
  
  const y = d3.scaleBand()
      .domain(d3.sort(data, d => -d.effectif).map(d => d.etablissement))
      .rangeRound([marginTop, height - marginBottom])
      .padding(0.1);

  // Create a value format.
  const format = x.tickFormat(20, "%");

  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height)
      .attr("viewBox", [0, 0, width, height])
      .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif;");
  
  // Append a rect for each letter.
  svg.append("g")
      .attr("fill", "steelblue")
    .selectAll()
    .data(data)
    .join("rect")
      .attr("x", x(0))
      .attr("y", (d) => y(d.etablissement))
      .attr("width", (d) => x(d.effectif) - x(0))
      .attr("height", y.bandwidth());
  
  // Append a label for each letter.
  svg.append("g")
      .attr("fill", "white")
      .attr("text-anchor", "end")
    .selectAll()
    .data(data)
    .join("text")
      .attr("x", (d) => x(d.effectif))
      .attr("y", (d) => y(d.etablissement))
      .attr("dy", "0.35em")
      .attr("dx", -4)
      .text((d) => d.effectif)
    .call((text) => text.filter(d => x(d.effectif)) // short bars
      .attr("dx", +4)
      .attr("fill", "black")
      .attr("text-anchor", "start"));

  // Create the axes.
  svg.append("g")
      .attr("transform", `translate(0,${marginTop})`)
      .call(d3.axisTop(x).ticks(width / 80, "%"))
      .call(g => g.select(".domain").remove());

  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y).tickSizeOuter(0));

      return svg.node();
  }

  
  // Append the SVG element.
  console.log(document.querySelector("[container-graph]"));
  const node = await chart();
  document.querySelector("[container-graph]").append(node);
  </script>
