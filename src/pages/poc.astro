---
import Layout from '../layouts/Layout.astro';

---
<Layout title="Graph poc">
  <main container-graph>
  </main>
</Layout>
<script>
  import * as d3 from "d3";
  
  const data = await d3.dsv(";","/data/etablissement.csv", (d) => {
    return {
        etablissement: d.etablissement,
        effectif: parseInt(d.effectif_de_terminale)
    }
  });
  console.log("data : ",data)

  // Declare the chart dimensions and margins.
  const width = 5 * data.length;
  const height = 400;
  const marginTop = 20;
  const marginRight = 20;
  const marginBottom = 30;
  const marginLeft = 40;

  // Declare the x (horizontal position) scale.

  const x = d3.scaleBand()
    .domain(data.map(d => d.etablissement))
    .range([marginLeft, width - marginRight])
    .padding(0.1);

    const xAxis = d3.axisBottom(x).tickSizeOuter(0);

  // Declare the y (vertical position) scale.
  const y = d3.scaleLinear()
    .domain([0, d3.max(data, d => d.effectif)]).nice()
    .range([height - marginBottom, marginTop]);
  
  // Create the SVG container.
  const svg = d3.create("svg")
      .attr("width", width)
      .attr("height", height).style("background-color", "white");

   // Create a bar for each letter.
   const bar = svg.append("g")
      .attr("fill", "steelblue")
    .selectAll("rect")
    .data(data)
    .join("rect")
      .style("mix-blend-mode", "multiply") // Darker color when bars overlap during the transition.
      .attr("x", d => x(d.etablissement))
      .attr("y", d => y(d.effectif))
      .attr("height", d => y(0) - y(d.effectif))
      .attr("width", x.bandwidth());    
  
  // Add the x-axis.
  svg.append("g")
      .attr("transform", `translate(0,${height - marginBottom})`)
      .call(xAxis);
  
  // Add the y-axis.
  svg.append("g")
      .attr("transform", `translate(${marginLeft},0)`)
      .call(d3.axisLeft(y).tickFormat((y) => (y * 100).toFixed()))
      .call(g => g.select(".domain").remove());
  
  // Append the SVG element.
  document.querySelector("[container-graph]").append(svg.node());
  
  </script>
